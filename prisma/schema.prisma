// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  sessions      Session[]
  blog          Blog[]
}

enum Role {
  owner
  author
  user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  slug      String   @unique
  stats     Stats    @relation(fields: [slug], references: [slug], onDelete: Cascade)
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  tag       Tag[]

  @@index([authorId])
  @@index([slug])
}

model Stats {
  slug  String @id @db.VarChar(128)
  likes Int    @default(0)
  views Int    @default(0)
  blog  Blog[]
}

model Tag {
  id      String @id @default(cuid())
  tagName String @unique
  blog    Blog[]
}
